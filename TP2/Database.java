/**
 * Database.java
 * Contient les méthodes que les lecteurs et rédacteurs utiliseront
 * pour coordonner l'accès à la base. L'accès est contrôlé avec la synchronisation
 * de Java.
 */
 
public class Database {
    private Data data;

    private static final int NAP_TIME = 5;

    public Database() {
      data = new Data(12,13);
    }

   // lecteurs et rédacteurs appellent cette méthode pour dormir.
   public static void napping() {
     int sleepTime = (int) (NAP_TIME * Math.random() );
     try { Thread.sleep(sleepTime*1000); } 
     catch(InterruptedException e) {}
   }

    
   public String effectiveReading() {
       return "["+data.getElt1()+","+data.getElt2()+"]";
   }
   
   public void effectiveWriting(int elt1, int elt2) {
       data.setElt1(elt1);
       //Thread.yield(); // to force problems in case not well synchronized
       int sleepTime = (int) (NAP_TIME * Math.random() );
       try { Thread.sleep(sleepTime*1000); } 
       catch(InterruptedException e) {}
       data.setElt2(elt2);
   }


   // le lecteur appelle cette méthode quand il commence à lire
   public int startRead()
   { 
	return 0 ; // pour que cela compile
   }

   // le lecteur appelle cette méthode quand il finit de lire
   public int endRead() { 
	return 0; // pour que cela compile
   }
   
   // le rédacteur appelle cette méthode lorsqu'il commence à écrire
    public void startWrite() { 
   }

   // le rédacteur appelle cette méthode quand il finit d'écrire
   public  void endWrite() { 
   }

   
    
   private static final int NAP_TIME = 5;

    class Data {
	int elt1, elt2;
	Data(int pairElt1, int pairElt2){
	    elt1=pairElt1;
	    elt2=pairElt2;
	}
	int getElt1() {
	    return elt1;
	}
	int getElt2() {
	    return elt2;
	}
	void setElt1(int elt1){
	    this.elt1=elt1;
	}
	void setElt2(int elt2){
	    this.elt2=elt2;
	}
    }
}
